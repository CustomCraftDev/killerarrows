package killerarrows;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.milkbowl.vault.economy.Economy;
import net.milkbowl.vault.economy.EconomyResponse;
import net.milkbowl.vault.economy.EconomyResponse.ResponseType;

import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;


/**
 * @author DieFriiks / CustomCraftDev / undeaD_D
 * @category KillerArrows plugin
 * @version 1.0
 */
public class Killerarrows extends JavaPlugin {
	
    FileConfiguration config;
	Material[] craft;
	Economy economy;
	
    boolean debug;
	boolean allarrowsohko;
	boolean allarrowscost;
	boolean crafting;
	boolean useeco;
	boolean isplayer;
	int arrowcost;
	int arrow_lvl;
	double arrowdamage;

	String msg_noperm;
	String arrow_name;
	String arrow_lore;
	String msg_disable;
	String msg_reset;
	String msg_reload;
	String msg_eco;
	String msg_arrow;
	String msg_arrow_equip;
	String msg_arrow_dequip;
	String msg_arrow_shot;
	
	List<String> players;
	List<String> bl_player;
	ArrayList<EntityType> bl_entity;
	List<String> bl_entity_config;


	
	/**
     * on Plugin enable
     */
	public void onEnable() {
		
		loadConfig();
    	say("Config loaded");
    	
    	useeco = setupEconomy();
    	if(useeco){
    		say("Vault hooked");
    	}
    	
    	
    	this.getServer().getPluginManager().registerEvents(new EventListener(this), this);
    	say("Eventlistener loaded");
	}

	
	/**
     * on Plugin disable
     */
	public void onDisable() {
		config.set("players", players);
	}


	/**
     * on Command
     * @param sender - command sender
     * @param cmd - command
     * @param alias
     * @return true or false
     */
	public boolean onCommand(CommandSender sender, Command cmd, String alias, String[] args) {
		isplayer = false;
		Player p = null;
		
		if ((sender instanceof Player)) {
			p = (Player)sender;
			isplayer = true;
		}
			if(cmd.getName().equalsIgnoreCase("ohko") && args.length != 0){
				
				// give
				if(args[0].equalsIgnoreCase("give")){
					if(isplayer){
						if(args.length > 1){
							if(p.hasPermission("ohko.give.others")){
								Player target = this.getServer().getPlayer(args[1]);
								if(target != null && target.isOnline()){
								  return give(target, true);
								}
							}
							else{
								p.sendMessage(msg_noperm);
								return true;
							}
						}
						else{
							if(p.hasPermission("ohko.give.self")){
								return give(p, false);
							}
							else{
								p.sendMessage(msg_noperm);
								return true;
							}
						}
					}
					else{
						if(args.length > 1){
							Player target = this.getServer().getPlayer(args[1]);
							if(target != null && target.isOnline()){
								  return give(target, true);
							}
							return true;
						}
						else{
							System.out.println("/ohko give <player>");
							return true;
						}
					}
				}
				
				// disable
				if(args[0].equalsIgnoreCase("disable")){
					if(isplayer){
						if(p.hasPermission("ohko.disable")){
							this.setEnabled(false);
							p.sendMessage(msg_disable);
							say("disabled by " + p.getName());
						return true;
					}
						else{
							p.sendMessage(msg_noperm);
							return true;
						}
					}
					else{
							this.setEnabled(false);
						System.out.println(msg_disable);
						return true;
					}
				}
				
				// reset
				if(args[0].equalsIgnoreCase("reset")){
					if(isplayer){
						if(p.hasPermission("ohko.reset")){
						    File configFile = new File(getDataFolder(), "config.yml");
						    configFile.delete();
						    saveDefaultConfig();
							p.sendMessage(msg_reset);
						    reload();
							p.sendMessage(msg_reload);
							say("reset by " + p.getName());
						return true;
						}
						else{
							p.sendMessage(msg_noperm);
							return true;
						}
					}
					else{
					    File configFile = new File(getDataFolder(), "config.yml");
					    configFile.delete();
					    saveDefaultConfig();
					    System.out.println(msg_reset);
					    reload();
					    System.out.println(msg_reload);
					    return true;
					}
				}
				
				// reload
				if(args[0].equalsIgnoreCase("reload")){
					if(isplayer){
						if(p.hasPermission("ohko.reload")){
							reload();
							p.sendMessage(msg_reload);
							say("reloaded by " + p.getName());
						return true;
					}
						else{
							p.sendMessage(msg_noperm);
							return true;
						}
					}
					else{
						    reload();
					    System.out.println(msg_reload);
						return true;
				    }
				}
			}
		
		// nothing to do here \o/
		return false;
	}
					
	
	/*
	 *  setup Economy with vault
	 */
    private boolean setupEconomy()
    {
    	try{
	        RegisteredServiceProvider<Economy> economyProvider = getServer().getServicesManager().getRegistration(net.milkbowl.vault.economy.Economy.class);
	        if (economyProvider != null) {
	            economy = economyProvider.getProvider();
	        }
        }catch(Exception e){
        	if(debug){
        		e.printStackTrace();
        	}
        }
        return (economy != null);
    }
	
    
    /*
     * give random arrow so they dont stack
     */
    public ItemStack randomarrow(){
		char[] chars = "0123456789abcdefghijklmnopqrstuvwxyz".toCharArray();
		StringBuilder sb = new StringBuilder();
		Random random = new Random();
		for (int i = 0; i < 15; i++) {
		    char c = chars[random.nextInt(chars.length)];
		    sb.append(c);
		}
		
		ItemStack arrow = new ItemStack(Material.ARROW, 1);
		arrow.addUnsafeEnchantment(Enchantment.ARROW_DAMAGE, arrow_lvl);
		ItemMeta m = arrow.getItemMeta();
				List<String> lore = new ArrayList<String>();
				String[] lore2 = arrow_lore.split("%nextline%");
				for(int i = 0; i < lore2.length; i++){
					lore.add(ChatColor.translateAlternateColorCodes('&', lore2[i]));
				}
				lore.add(ChatColor.GRAY + "Arrow number: " + sb.toString());
			m.setLore(lore);
			m.setDisplayName(arrow_name);
			arrow.setItemMeta(m);
		return arrow;
    }
    
	/**
     * give player ohko arrow
     */
	private boolean give(Player p, boolean money) {
		if(money){
			EconomyResponse response = economy.withdrawPlayer(p, arrowcost);
			if(response.type.equals(ResponseType.FAILURE) || response.type.equals(ResponseType.NOT_IMPLEMENTED)){
				p.sendMessage(msg_eco);
				return true;
			}
			else{
				p.getInventory().addItem(randomarrow());
				p.sendMessage(msg_arrow);
				return true;
			}
		}
		else{
			p.getInventory().addItem(randomarrow());
			return true;
		}
	}


	/**
     * load config settings
     */
	private void loadConfig() {
		
		config = getConfig();
		config.options().copyDefaults(true);
		saveConfig();
		
		arrow_name = ChatColor.translateAlternateColorCodes('&', config.getString("ohko-arrow.name"));
		arrow_lore = config.getString("ohko-arrow.lore");
		arrow_lvl = config.getInt("ohko-arrow.enchantment-lvl");
		allarrowsohko = config.getBoolean("ohko-arrow.all-arrows-ohko");
		allarrowscost = config.getBoolean("ohko-arrow.all-arrows-cost");
		arrowdamage = config.getDouble("ohko-arrow.arrow-damage");
		arrowcost = config.getInt("ohko-arrow.arrow-cost");
		
		msg_noperm = ChatColor.translateAlternateColorCodes('&', config.getString("msg.nopermission"));
		if(msg_noperm.startsWith("%no%")){
			msg_noperm = "";
		}
		
		msg_disable = ChatColor.translateAlternateColorCodes('&', config.getString("msg.disable"));
		if(msg_disable.startsWith("%no%")){
			msg_disable = "";
		}
		msg_reset = ChatColor.translateAlternateColorCodes('&', config.getString("msg.reset"));
		if(msg_reset.startsWith("%no%")){
			msg_reset = "";
		}
		msg_reload = ChatColor.translateAlternateColorCodes('&', config.getString("msg.reload"));
		if(msg_reload.startsWith("%no%")){
			msg_reload = "";
		}
		msg_eco = ChatColor.translateAlternateColorCodes('&', config.getString("msg.eco-error"));
		if(msg_eco.startsWith("%no%")){
			msg_eco = "";
		}
		msg_arrow = ChatColor.translateAlternateColorCodes('&', config.getString("msg.arrow-bought"));
		if(msg_arrow.startsWith("%no%")){
			msg_arrow = "";
		}
		msg_arrow_equip = ChatColor.translateAlternateColorCodes('&', config.getString("msg.arrow-equipped"));
		if(msg_arrow_equip.startsWith("%no%")){
			msg_arrow_equip = "";
		}
		msg_arrow_dequip = ChatColor.translateAlternateColorCodes('&', config.getString("msg.arrow-dequipped"));
		if(msg_arrow_dequip.startsWith("%no%")){
			msg_arrow_dequip = "";
		}
		msg_arrow_shot = ChatColor.translateAlternateColorCodes('&', config.getString("msg.arrow-shot"));
		if(msg_arrow_shot.startsWith("%no%")){
			msg_arrow_shot = "";
		}

		crafting = config.getBoolean("crafting.enable");		
		if(crafting){
			craft = new Material[3];
				craft[0] = Material.valueOf(config.getString("crafting.craft1"));
				craft[1] = Material.valueOf(config.getString("crafting.craft2"));
				craft[2] = Material.valueOf(config.getString("crafting.craft3"));
			ShapedRecipe arrowrecipe = new ShapedRecipe(randomarrow()).shape(" a ", " b ", " c ").setIngredient('a', craft[0]).setIngredient('b', craft[1]).setIngredient('c', craft[2]);
			this.getServer().addRecipe(arrowrecipe);
		}

		debug = config.getBoolean("debug");
		bl_entity_config = (List<String>) config.getStringList("blacklisted-entities");
		bl_entity = new ArrayList<EntityType>();
		for(int i = 0; i < bl_entity_config.size(); i++){
			bl_entity.add(EntityType.valueOf(bl_entity_config.get(i)));
		}
		bl_player = (List<String>) config.getStringList("blacklisted-players");
		players = config.getStringList("players");
		
	}
	   
    
    /**
     * reload
     */
    private void reload(){
 	   	try {
 	   		// Remove unused variables and objects
			    config = null;
			    economy = null;
			    craft = null;
			    
			    arrow_name = null;
			    arrow_lore = null;
			    msg_disable = null;
			    msg_reset = null;
			    msg_reload = null;
				msg_eco = null;
				msg_arrow = null;
				msg_arrow_equip = null;
				msg_arrow_dequip = null;
				msg_arrow_shot = null;
			    
			    bl_entity_config = null;
				players = null;
				bl_player = null;
				bl_entity = null;

			// Run java garbage collector to delete unused things
			    System.gc();
			
			// load everything again
				reloadConfig();
				loadConfig();
			
 	   	} catch (Exception e) {
        	if(debug){
        		e.printStackTrace();
        	}
        }
    }
    
    
    /**
     * print to console
     * @param message to print
     */
	public void say(String out) {
		if(debug){
			System.out.println("[KillerArrows] " + out);
		}
	}	
}
