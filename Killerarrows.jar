package killerarrows;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import net.milkbowl.vault.economy.Economy;
import net.milkbowl.vault.economy.EconomyResponse;
import net.milkbowl.vault.economy.EconomyResponse.ResponseType;

import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;


/**
 * @author DieFriiks / CustomCraftDev / undeaD_D
 * @category KillerArrows plugin
 * @version 1.0
 */
public class Killerarrows extends JavaPlugin {
	
    FileConfiguration config;
	Material[] craft;
	Economy economy;
	ItemStack arrow;
	
    boolean debug;
	boolean allarrowsohko;
	boolean allarrowscost;
	boolean crafting;
	boolean useeco;
	int arrowcost;
	double arrowdamage;
	
	String msg_eco;
	String msg_arrow;
	String msg_arrow_equip;
	String msg_arrow_dequip;
	String msg_arrow_shot;
	
	List<String> players;
	List<String> bl_player;
	ArrayList<EntityType> bl_entity;
	List<String> bl_entity_config;

	
	/**
     * on Plugin enable
     */
	public void onEnable() {
		
		loadConfig();
    	say("Config loaded");
    	
    	useeco = setupEconomy();
    	if(useeco){
    		say("Vault hooked");
    	}
    	
    	new EventListener(this);
    	say("Eventlistener loaded");
	}

	
	/**
     * on Plugin disable
     */
	public void onDisable() {
		config.set("players", players);
	}


	/**
     * on Command
     * @param sender - command sender
     * @param cmd - command
     * @param alias
     * @return true or false
     */
	public boolean onCommand(CommandSender sender, Command cmd, String alias, String[] args) {
		if ((sender instanceof Player)) {
			Player p = (Player)sender;

			if(cmd.getName().equalsIgnoreCase("ohko") && args.length != 0){
				
				// give
				if(args[0].equalsIgnoreCase("give")){
					if(args.length > 1){
						if(p.hasPermission("ohko.give.others")){
							Player target = this.getServer().getPlayer(args[1]);
							if(target != null && target.isOnline()){
							  return give(target);
							}
						}
					}
					else{
						if(p.hasPermission("ohko.give.self")){
							return give(p);
						}
					}
				}
				
				// disable
				if(args[0].equalsIgnoreCase("disable") && p.hasPermission("ohko.disable")){
						this.setEnabled(false);
						p.sendMessage(ChatColor.RED + "[KillerArrows] was disabled");
						say("disabled by " + p.getName());
					return true;
				}
				
				// reset
				if(args[0].equalsIgnoreCase("reset") && p.hasPermission("ohko.reset")){
					    File configFile = new File(getDataFolder(), "config.yml");
					    configFile.delete();
					    saveDefaultConfig();
						p.sendMessage(ChatColor.RED + "[KillerArrows] config reset");
					    reload();
						p.sendMessage(ChatColor.RED + "[KillerArrows] was reloaded");
						say("reset by " + p.getName());
					return true;
				}
				
				// reload
				if(args[0].equalsIgnoreCase("reload") && p.hasPermission("ohko.reload")){
						reload();
						p.sendMessage(ChatColor.RED + "[KillerArrows] was reloaded");
						say("reloaded by " + p.getName());
					return true;
				}
			}
		}
		
		// commands from console
		else{
			System.out.println("[KillerArrows] Command ingame only ...");
			return true;
		}
		
		// nothing to do here \o/
		return false;
	}
	
    private boolean setupEconomy()
    {
    	try{
	        RegisteredServiceProvider<Economy> economyProvider = getServer().getServicesManager().getRegistration(net.milkbowl.vault.economy.Economy.class);
	        if (economyProvider != null) {
	            economy = economyProvider.getProvider();
	        }
        }catch(Exception e){
        	if(debug){
        		e.printStackTrace();
        	}
        }
        return (economy != null);
    }
	
    
	/**
     * give player ohko arrow
     */
	private boolean give(Player p) {
		EconomyResponse response = economy.withdrawPlayer(p, arrowcost);
		if(response.type.equals(ResponseType.FAILURE) || response.type.equals(ResponseType.NOT_IMPLEMENTED)){
			p.sendMessage(msg_eco);
			return false;
		}
		else{
			p.getInventory().addItem(arrow);
			p.sendMessage(msg_arrow);
			return true;
		}
	}


	/**
     * load config settings
     */
	private void loadConfig() {
		
		config = getConfig();
		config.options().copyDefaults(true);
		saveConfig();
		
		allarrowsohko = config.getBoolean("all-arrows-ohko");
		allarrowscost = config.getBoolean("all-arrows-cost");
		arrowdamage = config.getDouble("arrow-damage");
		arrowcost = config.getInt("arrow-cost");
		msg_eco = config.getString("");
		msg_arrow = config.getString("");
		msg_arrow_equip = config.getString("msg-arrow-equip");
		msg_arrow_dequip = config.getString("msg-arrow-dequip");
		msg_arrow_shot = config.getString("msg-arrow-shot");
		
		crafting = config.getBoolean("enable-crafting");
		if(crafting){
			craft = new Material[9];
			String s1[] = config.getString("craft1").split(" ");
			String s2[] = config.getString("craft2").split(" ");
			String s3[] = config.getString("craft3").split(" ");
				craft[0] = Material.matchMaterial(s1[0]);
				craft[1] = Material.matchMaterial(s1[1]);
				craft[2] = Material.matchMaterial(s1[2]);
				craft[3] = Material.matchMaterial(s2[0]);
				craft[4] = Material.matchMaterial(s2[1]);
				craft[5] = Material.matchMaterial(s2[2]);
				craft[6] = Material.matchMaterial(s3[0]);
				craft[7] = Material.matchMaterial(s3[1]);
				craft[8] = Material.matchMaterial(s3[2]);
			s1 = null;
			s2 = null;
			s3 = null;
			
			arrow = new ItemStack(Material.ARROW, 1);
			arrow.addUnsafeEnchantment(Enchantment.ARROW_DAMAGE, 10);
			ItemMeta m = arrow.getItemMeta();
					List<String> lore = new ArrayList<String>();
					lore.add(ChatColor.GRAY + "When you hit someone with this arrow with a bow,");
					lore.add(ChatColor.GRAY + "they will die instantly!");
					lore.add(ChatColor.GRAY + "rightclick to equip/unequip");
				m.setLore(lore);
				m.setDisplayName(ChatColor.RED + "OHKO Arrow");
				arrow.setItemMeta(m);
			
			ShapedRecipe arrowrecipe = new ShapedRecipe(arrow).shape("abc", "def", "ghi").setIngredient('a', craft[0]).setIngredient('b', craft[1]).setIngredient('c', craft[2]).
					setIngredient('d', craft[3]).setIngredient('e', craft[4]).setIngredient('f', craft[5]).setIngredient('g', craft[6]).setIngredient('h', craft[7]).setIngredient('i', craft[8]);
					getServer().addRecipe(arrowrecipe);
		}

		debug = config.getBoolean("debug");
		bl_entity_config = (List<String>) config.getStringList("blacklisted-entities");
		for(int i = 0; i < bl_entity_config.size(); i++){
			bl_entity.add(EntityType.valueOf(bl_entity_config.get(i)));
		}
		bl_player = (List<String>) config.getStringList("blacklisted-players");
		
		players = config.getStringList("players");
	}
	   
    
    /**
     * reload
     */
    private void reload(){
 	   	try {
 	   		// Remove unused variables and objects
			    config = null;
			    economy = null;
			    craft = null;
			    
				msg_eco = null;
				msg_arrow = null;
				msg_arrow_equip = null;
				msg_arrow_dequip = null;
				msg_arrow_shot = null;
			    
			    bl_entity_config = null;
				players = null;
				bl_player = null;
				bl_entity = null;

			// Run java garbage collector to delete unused things
			    System.gc();
			
			// load everything again
				reloadConfig();
				loadConfig();
			
 	   	} catch (Exception e) {
        	if(debug){
        		e.printStackTrace();
        	}
        }
    }
    
    
    /**
     * print to console
     * @param message to print
     */
	public void say(String out) {
		if(debug){
			System.out.println("[KillerArrows] " + out);
		}
	}	
}
